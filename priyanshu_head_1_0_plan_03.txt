# milesStone-1 cmdLineArg ==> node head.js one.txt
# output ==> 
  1
  2
  3
  4
  5
  6
  7
  8
  9
  10

# milesStone-2 cmdLineArg ==> node head.js -n 3 one.txt
# output ==> 
  1
  2
  3

# milesStone-3 cmdLineArg ==> cat one.txt | node head.js
# output ==>
one
two
three
four
five
six
seven
eight
nine
ten
__________________________________________
# challenge-1 when filename is missing
cmdLineArg ==> node head.js   
output ==>quit (after taking 10 inputs)

# challenge-2 when non-Existing file is given
cmdLineArg ==> node head.js two.txt  
output ==> two.txt: No such file or directory

# challenge-3 when file has lines less than default value
cmdLineArg ==> node head.js three.txt  
--output-- 
one
two
three

# challenge-4 when incorrect args are given
cmdLineArg ==> node head.js -n one.txt  
--output-- 
head: illegal line count -- one.txt
___________________________________________
****** flow of default path for head command ******

1.1 a when input is correct for default case
node head.js one.txt
output ==> 
one
two
three
four
five
six
seven
eight
nine
ten

# typeOf output ==> String
input ==> rows ==> ['one','two','three','four','five,'six','seven','eight','nine','ten']
name ==>displayMsg

1.1 b when input is correct with specified no of lines 
node head.js -n 3 one.txt
output ==> 
one
two
three

# typeOf output ==> String
input ==> rows ==> ['one','two','three']
name ==>displayMsg

1.1 c when wrong file is given occurs
node head.js two.txt
output ==> two.txt: No such file or directory
# typeOf output ==> String
input ==> error 
name ==> displayMsg

1.1 d when incorrect arguments are given
node head.js -n one.txt
output ==> head: illegal line count -- one.txt
#type of output ==> string
input ==>error
name ==> displayMsg

1.1 e when file has to read from standard input
node cat one.txt | node head.js
output ==> 
one
two
three
four
five
six
seven
eight
nine

#type of output ==> string
input ==> rows ==> ['one','two','three','four','five,'six','seven','eight','nine','ten']
name ==> displayMsg
_______________________________________

1.2 --last step-- output ==> extractedRows ==> ['one','two','three','four','five,'six','seven','eight','nine','ten']
# typeOf output ==> array of String
input ==> rows ==> ['one','two','three','four','five,'six','seven','eight','nine','ten','eleven','twelve']
name ==> extractRows
_______________________________________

1.3 --previous step-- output ==> rows ==>['one','two','three','four','five,'six','seven','eight','nine','ten','eleven','twelve']
# typeOf output ==> array of String
input ==>  contents ==> `one\ntwo\three\four\nfive\nsix\nseven\neight\nnine\ten\eleven\ntwelve`
name ==>formatContentToLine
_______________________________________

1.4 a-- when correct file is given
--previous Step-- output ==> contents ==> `one\ntwo\three\four\nfive\nsix\nseven\neight\nnine\ten\eleven\ntwelve`  
# typeOf output ==> String
input ==> parsedArgs ==> filename ==> one.txt
name ==> loadFile

1.4 b-- when wrong file is given
--previous Step-- output ==> error ==> two.txt: No such file or directory
# typeOf output ==> String
input ==> parsedArgs ==> filename ==> two.txt
name ==> loadFile
_______________________________________

1.5 a-- when one correct file is given with correct command with specified line no. ==>node head.js one.txt
--previous step -- output ==> parsedArgs ==> {lines : 3 ,file : one.txt}  (filename)
# typeOf output ==> object
input ==> cmdLineArg ==> ["node","path/head","-n","3","one.txt"]    //array of string
name ==> parseInput

1.5 b-- when one correct file is given with correct command (default) ==>node head.js one.txt
--previous step -- output ==> parsedArgs ==> {lines : 10, file : "one.txt"}  
# typeOf output ==> Object
input ==> cmdLineArg ==> ["node","path/head","one.txt"]    //array of string
name ==> parseInput

1.5 c-- when filename is missing ==> node head.js
--previous step -- output ==> quit 
# typeOf output ==> String
input ==> cmdLineArg ==> ["node","path/head"]    //array of string
name ==> parseInput

1.5 d-- when incorrect arguments are given
--previous step -- output ==> error ==> head: illegal line count -- one.txt
# typeOf output ==> object
# type of error ==> string
input ==> cmdLineArg ==> ["node","path/head.js","-n","one.txt"]    //array of string
name ==> parseInput

_____________________________________________________
1.6 when file is to be read from standard input
cat one.txt | node head.js
--previous step-- output ==> filename ==> one.txt   //go to 1.3
# type of output ==> string
input ==> cmdLineArg ==> ["node","head.js"]
name ==> loadContentFromCmdLine